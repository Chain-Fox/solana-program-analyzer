use super::ParsedDependency;
use semver::{Version, VersionReq};

const SAFE_SPL_VERSION: &str = ">=3.1.1";
const VUL_SPL_VERSION: &str = "3.1.0";

pub fn detect_vulnerable_dep(deps: &[ParsedDependency]) -> Option<String> {
    for dep in deps {
        if &dep.name == "spl-token"
            && dep.version.is_some()
            && !safe_spl_version(dep.version.as_ref().unwrap())
        {
            return Some(format!(
                "{}: {} does not satisfy {}",
                dep.name,
                dep.version.as_ref().unwrap(),
                SAFE_SPL_VERSION
            ));
        }
    }
    None
}

fn safe_spl_version(version: &str) -> bool {
    let vul_version = Version::parse(VUL_SPL_VERSION).unwrap();
    let precise_version = Version::parse(version);
    match precise_version {
        Ok(v) => {
            let safe_version = VersionReq::parse(SAFE_SPL_VERSION).unwrap();
            safe_version.matches(&v)
        }
        Err(_) => {
            let current_version = VersionReq::parse(version).unwrap();
            !current_version.matches(&vul_version)
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_safe_spl_version() {
        let vul_version = "2.0.0";
        assert!(!safe_spl_version(vul_version));
        let vul_version = "3.0.0";
        assert!(!safe_spl_version(vul_version));
        let vul_version = "3.1.0";
        assert!(!safe_spl_version(vul_version));
        let vul_version = "~3.1.0";
        assert!(!safe_spl_version(vul_version));
        let vul_version = "=3.1.0";
        assert!(!safe_spl_version(vul_version));
        let vul_version = "3.1.1";
        assert!(safe_spl_version(vul_version));
        let vul_version = "^3.1.1";
        assert!(safe_spl_version(vul_version));
        let vul_version = "=3.1.1";
        assert!(safe_spl_version(vul_version));
        let vul_version = "3.1.2";
        assert!(safe_spl_version(vul_version));
        let vul_version = "3.2.2";
        assert!(safe_spl_version(vul_version));
        let vul_version = "4.0.0";
        assert!(safe_spl_version(vul_version));
    }
}
